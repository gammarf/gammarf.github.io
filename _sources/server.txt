Server
******

The client sends its data to the server as JSON objects, on ports defined in the
source.  The default is TCP port 8091 for the command (signalling) channel, and
TCP port 8090 for everything else.

Structure and Installation
==========================
When setting up a server, it's best to set its time zone to UTC.  The server may
accept data from clients in different time-zones, and having it set to UTC can
resolve confusion.

The server runs in a Docker container.  It relies on some external services.
With the exception of PostgreSQL, these external services must be running on the
same server as ΓRF (localhost).  These services can be deployed with Docker as
well, if you'd like.

You can adjust parameters relating to the support services by editing the
``setupfiles/grf_config.json`` file.  InfluxDB is assumed to be listening only
on the loopback interface!  ΓRF interacts with these without authentication.

The PostgreSQL database server is used to hold administrative information,
including stations the node will accept data from, a list of 'interesting'
frequencies, and P25 talkgroups for each node.  If you'd like a set of users to
be able to send data to the server off the bat, edit the
``dbfiles/grf_initial_users.sql`` file in the server source tree before
building the Docker image.  Users you specify here will exist from the
beginning.

Changes made to the administrative tables will be picked up by the server
modules periodically (the default refresh time is one minute).

ΓRF will install the PostgreSQL tables the first time it is run.  It depends
on a ``gammarf`` database existing, and on the user specified in the
configuration file having full permissions on that database.  Running this
in PostgreSQL can make this happen:

``CREATE DATABASE gammarf; GRANT ALL PRIVILEGES ON DATABASE gammarf TO gammarf;``

InfluxDB is used to hold relatively short-term time series information.  The
default retention time is one week.  The retention time can be changed in
the ``setupfiles/grf_config.json`` file (this must be done before running the
container for the first time.)  Be careful with this - increasing the retention
time puts additional strain on the server.

Redis needs to be running and listening on the loopback interface.

Once you have the external services referenced above running, build the
container by typing ``docker build .`` in the top level of the source tree.
Edit the ``grf_server.sh`` script in the server source tree to include the
image ID output by the build command, then run that script.  You'll be in
the Docker container, and ΓRF server should be running.

Django is running on the ΓRF server, on port 8080.  You can access the
admin interface by logging in at ``http://[server]:8080/admin/`` and using
the credentials you entered when prompted, the first time you ran the
Docker container.  From the admin page you can add, delete, and modify rows
in the PostreSQL administration tables.  One of the first things you may
want to do after running the server container is logging in to the admin
interface and adding an initial station.  You can also add "interesting"
frequencies for your stations here.  These are frequencies that stations
will report ``scanner`` module hits on.
